# Generated by Django 5.2.5 on 2025-10-05 03:44

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('mi_app', '0034_configuracionsitio_prefills_extra'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChatGPTApiKey',
            fields=[
            ],
            options={
                'verbose_name': 'Clave ChatGPT',
                'verbose_name_plural': 'Claves ChatGPT',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('mi_app.apikey',),
        ),
        migrations.CreateModel(
            name='GeminiApiKey',
            fields=[
            ],
            options={
                'verbose_name': 'Clave Gemini',
                'verbose_name_plural': 'Claves Gemini',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('mi_app.apikey',),
        ),
        migrations.AlterField(
            model_name='configuracionchatbot',
            name='chat_provider',
            field=models.CharField(choices=[('gemini', 'Gemini'), ('chatgpt', 'ChatGPT')], default='gemini', help_text='(Legacy) Proveedor activo. Si usas los toggles de abajo, este valor se sincroniza automáticamente.', max_length=20),
        ),
        migrations.AlterField(
            model_name='configuracionsitio',
            name='whatsapp_prefill_message',
            field=models.CharField(blank=True, default='Hola {store_name}, quiero más información.', help_text='Mensaje inicial para el enlace flotante de WhatsApp (icono de redes). Usa {store_name}. Deja vacío para no incluir mensaje.', max_length=200),
        ),
        migrations.AlterField(
            model_name='configuracionsitio',
            name='whatsapp_roulette_win_message',
            field=models.TextField(blank=True, default="¡Hola! Acabo de ganar '{prize_name}' en la ruleta. Mi código de cupón para validar es: {coupon_code}", help_text='Plantilla mensaje reclamo ruleta. Placeholders: {store_name}, {prize_name}, {coupon_code}.'),
        ),
        migrations.RunPython(
            code=lambda apps, schema_editor: _update_old_roulette_messages(apps),
            reverse_code=migrations.RunPython.noop
        )
    ]


def _update_old_roulette_messages(apps):
    ConfiguracionSitio = apps.get_model('mi_app', 'ConfiguracionSitio')
    try:
        cfg = ConfiguracionSitio.objects.get()
    except ConfiguracionSitio.DoesNotExist:
        return
    old_default_prefix = '¡Hola {store_name}! Acabo de ganar "{prize_name}" en la ruleta.'
    # Si el usuario no modificó más que quizás el store_name resuelto, detectamos el patrón antiguo
    if cfg.whatsapp_roulette_win_message and '"{prize_name}"' in cfg.whatsapp_roulette_win_message and '{coupon_code}' in cfg.whatsapp_roulette_win_message:
        # Reemplazar comillas dobles por simples y quitar {store_name}! si exactamente estaba presente
        new_msg = cfg.whatsapp_roulette_win_message.replace('"{prize_name}"', "'{prize_name}'")
        new_msg = new_msg.replace('{store_name}! ', '')  # convierte '¡Hola {store_name}! ' en '¡Hola '
        # Si quedó '¡Hola  Acabo' por doble espacio arreglamos
        new_msg = new_msg.replace('¡Hola  Acabo', '¡Hola! Acabo')
        # Asegurar que empiece por '¡Hola!' por consistencia
        if not new_msg.startswith('¡Hola!'):
            new_msg = new_msg.replace('¡Hola ', '¡Hola! ', 1)
        cfg.whatsapp_roulette_win_message = new_msg
        cfg.save(update_fields=['whatsapp_roulette_win_message'])
